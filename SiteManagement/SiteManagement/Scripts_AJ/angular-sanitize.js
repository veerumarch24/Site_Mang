!function (a, b, c) { "use strict"; function z(a) { var d, b = {}, c = a.split(","); for (d = 0; d < c.length; d++) b[c[d]] = !0; return b } function A(a, c) { function x(a, d, e, f) { if (d = b.lowercase(d), t[d]) for (; q.last() && u[q.last()];) y("", q.last()); s[d] && q.last() == d && y("", d), f = p[d] || !!f, f || q.push(d); var g = {}; e.replace(h, function (a, b, c, d, e) { var f = c || d || e || ""; g[b] = C(f) }), c.start && c.start(d, g, f) } function y(a, d) { var f, e = 0; if (d = b.lowercase(d)) for (e = q.length - 1; e >= 0 && q[e] != d; e--); if (e >= 0) { for (f = q.length - 1; f >= e; f--) c.end && c.end(q[f]); q.length = e } } var e, n, o, q = [], r = a; for (q.last = function () { return q[q.length - 1] }; a;) { if (n = !0, q.last() && v[q.last()]) a = a.replace(new RegExp("(.*)<\\s*\\/\\s*" + q.last() + "[^>]*>", "i"), function (a, b) { return b = b.replace(k, "$1").replace(m, "$1"), c.chars && c.chars(C(b)), "" }), y("", q.last()); else if (0 === a.indexOf("<!--") ? (e = a.indexOf("--", 4), e >= 0 && a.lastIndexOf("-->", e) === e && (c.comment && c.comment(a.substring(4, e)), a = a.substring(e + 3), n = !1)) : l.test(a) ? (o = a.match(l), o && (a = a.replace(o[0], ""), n = !1)) : j.test(a) ? (o = a.match(g), o && (a = a.substring(o[0].length), o[0].replace(g, y), n = !1)) : i.test(a) && (o = a.match(f), o && (a = a.substring(o[0].length), o[0].replace(f, x), n = !1)), n) { e = a.indexOf("<"); var w = e < 0 ? a : a.substring(0, e); a = e < 0 ? "" : a.substring(e), c.chars && c.chars(C(w)) } if (a == r) throw d("badparse", "The sanitizer was unable to parse the following block of html: {0}", a); r = a } y() } function C(a) { return B.innerHTML = a.replace(/</g, "&lt;"), B.innerText || B.textContent || "" } function D(a) { return a.replace(/&/g, "&amp;").replace(o, function (a) { return "&#" + a.charCodeAt(0) + ";" }).replace(/</g, "&lt;").replace(/>/g, "&gt;") } function E(a) { var c = !1, d = b.bind(a, a.push); return { start: function (a, e, f) { a = b.lowercase(a), !c && v[a] && (c = a), c || w[a] !== !0 || (d("<"), d(a), b.forEach(e, function (a, c) { var e = b.lowercase(c); y[e] !== !0 || x[e] === !0 && !a.match(n) || (d(" "), d(c), d('="'), d(D(a)), d('"')) }), d(f ? "/>" : ">")) }, end: function (a) { a = b.lowercase(a), c || w[a] !== !0 || (d("</"), d(a), d(">")), a == c && (c = !1) }, chars: function (a) { c || d(D(a)) } } } var d = b.$$minErr("$sanitize"), e = function (a) { var b = []; return A(a, E(b)), b.join("") }, f = /^<\s*([\w:-]+)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*>/, g = /^<\s*\/\s*([\w:-]+)[^>]*>/, h = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g, i = /^</, j = /^<\s*\//, k = /<!--(.*?)-->/g, l = /<!DOCTYPE([^>]*?)>/i, m = /<!\[CDATA\[(.*?)]]>/g, n = /^((ftp|https?):\/\/|mailto:|tel:|#)/i, o = /([^\#-~| |!])/g, p = z("area,br,col,hr,img,wbr"), q = z("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"), r = z("rp,rt"), s = b.extend({}, r, q), t = b.extend({}, q, z("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")), u = b.extend({}, r, z("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")), v = z("script,style"), w = b.extend({}, p, t, u, s), x = z("background,cite,href,longdesc,src,usemap"), y = b.extend({}, x, z("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,span,start,summary,target,title,type,valign,value,vspace,width")), B = document.createElement("pre"); b.module("ngSanitize", []).value("$sanitize", e), b.module("ngSanitize").filter("linky", function () { var a = /((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>]/, c = /^mailto:/; return function (d, e) { if (!d) return d; var f, j, k, g = d, h = [], i = E(h), l = {}; for (b.isDefined(e) && (l.target = e) ; f = g.match(a) ;) j = f[0], f[2] == f[3] && (j = "mailto:" + j), k = f.index, i.chars(g.substr(0, k)), l.href = j, i.start("a", l), i.chars(f[0].replace(c, "")), i.end("a"), g = g.substring(k + f[0].length); return i.chars(g), h.join("") } }) }(window, window.angular);